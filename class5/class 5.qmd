---
title: "Class 5: Data Viz by ggplot"
author: "Chen (PID=A59026768)"
format: pdf
date: Wed 01/24/2024
editor: visual
---

# Graphics systems in R
There are many graphics systems for R. These include so called **"base R"** and those in add-on packages like `ggplot2`.

```{r}
cars
plot(cars)
```

How can we make this with `ggplot`?
This is an add-on package and I first need to install it on my computer. This install is to a one time only deal. 
To install packages use `install.packages()` function.
To use it we need to load up the package from our library use `library()`

```{r}
#do it in console
#install.packages("ggplot2")
library(ggplot2)

ggplot(cars)+
  aes(x=speed, y=dist)+
  geom_point()
```

Using ggplot is not as straightforward as base R plot for basic plots. I have some more typing to do.
Every ggplot has at least 3 things (layers):
-data (data.frame)
-aes (how the data map to the plot)
-geoms (think of this as the type of plot, e.g. points, lines ...etc)

Here ggplot is verbose- i.e. U had more typing to do.However, I can add more layers.

```{r}
ggplot(cars)+
  aes(speed, dist)+
  geom_point()+
#geom_path()+
  geom_smooth(method= "lm", se = FALSE)+
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "Your informative subtitle text here",
       caption="Dataset: 'cars'")+
  theme_bw()
```
```{r}
p <- ggplot(cars)+
  aes(speed, dist)+
  geom_point()

```

```{r}
library(patchwork)
(p | p)/p
```




```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes, 7)
```

Use the nrow() function to find out how many genes are in this dataset. What is your answer?

```{r}
colnames(genes)
ncol(genes)
n <- nrow(genes)
t <- table(genes$State)
n
t
round((table(genes$State)/nrow(genes))*100, 2)



```



```{r}
ggplot(genes)+
  #if you want ur color depends on your data, u have to argue the color at aes, instead of geom_point.
  aes(x = Condition1, y = Condition2, col = State)+
  geom_point()
```


```{r}
p <- ggplot(genes)+
  aes(x = Condition1, y = Condition2, col=State, name=Gene)+
  geom_point()+
  scale_colour_manual( values=c("blue","gray","red") )

p2 <-p+ labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")

p2

```


There is an interactive version wotj `plotly` so that you can pinpoint any point on the figure.

```{r}
library(plotly)
 #ggplotly(p2)
```
When library(plotly), there are some messages says:

Attaching package: ‘plotly’

The following object is masked from ‘package:ggplot2’:

    last_plot

The following object is masked from ‘package:stats’:

    filter

The following object is masked from ‘package:graphics’:

    layout
In this case, 
```{r}
#| message: false

#use "|" instead of "/"

library(plotly)
```


```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
library(ggplot2)
library(dplyr)
gapminder_2007 <- gapminder %>% filter(year==2007)

ggplot(gapminder_2007)+
  geom_point(aes(x = gdpPercap, y = lifeExp, col = continent, size = pop), alpha = 0.5)+
  scale_size_area(max_size = 10)
```




```{r}
gapminder_top5 <- gapminder %>% filter(year==2007) %>% arrange(desc(pop)) %>%
  top_n(5, pop)
#gapminder_top5

ggplot(gapminder_top5) +
  geom_col(aes(x=country, y= pop,fill = continent))

```


```{r}
ggplot(gapminder_top5)+
  geom_col(aes(x=reorder(country, -pop),y=pop, fill=gdpPercap))
```


```{r}

```


